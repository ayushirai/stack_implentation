#include<GL/glut.h>
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<Windows.h>
#define ESCAPE 27
#define BACKSPACE 8
GLint window;
void *currentfont;
const int MAX=5;
int flagwired=0;
int sm=4;
int r=0,g=1,b=0;
int view=0;
class button
{
	int x1,y1,x2,y2;
	int state;
	char str[10];

public:
	button()
	{

	}
	button(int x11,int y11,int x22,int y22,char *str1)
	{
		x1=x11;
		y1=y11;
		x2=x22;
		y2=y22;
		state=1;
		strcpy(str,str1);
	}
	void draw();
	void draw1();
	void togglestate();
	int insidebutton(int x,int y);
};
class stack
{
	button s[MAX];
   int top;

public:
   stack()
   {
	   top=-1;
   }
   int stfull();
   button pop();
   void push(int item);
   int stempty();
   void displaystack();
   void displaystack1();
};
stack st;
void setFont(void *font)
{
	currentfont=font;
}
void drawstring(float x,float y,char *string)
{
	    char *c;
	glRasterPos2f(x,y);
	for(c=string;*c!='\0';c++)
	{	glColor3f(0.0,0.0,0.0);
		glutBitmapCharacter(currentfont,*c);
	}
}
void button::draw()
{
	setFont(GLUT_BITMAP_HELVETICA_18);
	glColor3f(1.0,1.0,1.0);
		drawstring(x1+10,y1+10,str);
	glColor3f(0.2,0.2,0.8);
	glBegin(GL_QUADS);
	glVertex2f(x1,y1);
	glVertex2f(x2,y1);
	glVertex2f(x2,y2);
	glVertex2f(x1,y2);
	glEnd();
	if(state==0)
	{
	glColor3f(0,0,0);
	glBegin(GL_LINES);
	glVertex2f(x1,y1);
	glVertex2f(x2,y1);
	glVertex2f(x2,y1);
	glVertex2f(x2,y2);
	glEnd();
	}
	else if(state==1)
	{
		glColor3f(0,0,0);
		glBegin(GL_LINES);
		glVertex2f(x1,y1);
		glVertex2f(x1,y2);
		glVertex2f(x1,y2);
		glVertex2f(x2,y2);
		glEnd();
	}
}
void button::draw1()
{
	setFont(GLUT_BITMAP_HELVETICA_18);
	glColor3f(1.0,1.0,1.0);
		drawstring(x1+10,y1+10,str);
	glColor3f(0.2,0.2,0.8);
	glBegin(GL_LINE_LOOP);
	glVertex2f(x1,y1);
	glVertex2f(x2,y1);
	glVertex2f(x2,y2);
	glVertex2f(x1,y2);
	glEnd();
	if(state==0)
	{
	glColor3f(0,0,0);
	glBegin(GL_LINES);
	glVertex2f(x1,y1);
	glVertex2f(x2,y1);
	glVertex2f(x2,y1);
	glVertex2f(x2,y2);
	glEnd();
	}
	else if(state==1)
	{
		glColor3f(0,0,0);
		glBegin(GL_LINES);
		glVertex2f(x1,y1);
		glVertex2f(x1,y2);
		glVertex2f(x1,y2);
		glVertex2f(x2,y2);
		glEnd();
	}
}
void button::togglestate(void)
{
	/*if(state==1)
		state=0;
	else if(state==0)
		state=1;*/
	state=(state==1)?0:1;
}
int button::insidebutton(int x,int y)
{
	if(x>x1&&x<x2&&y>y1&&y<y2)
		return 1;
	else return 0;
}
button btn1(100,100,175,150,"Push");
button btn2(200,100,275,150,"Pop");
// Stack functions start
//
int stack::stfull() {
   if (st.top >= MAX)
      return 1;
   else
      return 0;
}

void stack::push(int item) {
	char str[10];
if(st.top==MAX-1)
{
	printf("\nstack overflow!!\n");
}
else{
        printf("\nEnter element to push:");
        scanf("%s",str);
	//printf(str, sizeof(str), "%d", item);
		//Sleep(1000);
    button btn(100,250+st.top*50,150,300+st.top*50,str);
	st.top++;
	printf("top=%d\n",st.top);
	printf("element in stack=%d\n",st.top+1);
	printf("remaining space=%d\n",(5-(st.top+1)));
	printf("\n");
   st.s[st.top] = btn;
}

}

int stack::stempty() {
   if (st.top == -2)
      return 1;
   else
      return 0;
}

button stack::pop() {
   button item;
   if(st.top==-1)
    {
        printf("\nstack underflow!!\n");
    }
    else
    {
		item = st.s[st.top];
		printf("\nDeleted stack top element\n");
		st.top--;
		printf("top=%d\n",st.top);
		printf("element in stack=%d\n",st.top+1);
		printf("remaining space=%d\n",(5-(st.top+1)));
		printf("\n");
		return (item);
   }
}

void stack::displaystack() {
   int i;
   if (st.stempty())
   {
	   glColor3f(1.0,0.0,0.0);
      drawstring(250,540,"Stack Is Empty!");
   }
   else {
      for (i = st.top; i >= 0; i--)
    	  st.s[i].draw();

   }
}
void stack::displaystack1() {
   int i;
   if (st.stempty())
   {
	   glColor3f(1.0,0.0,0.0);
      drawstring(250,540,"Stack Is Empty!");
   }
   else {
      for (i = st.top; i >= 0; i--)
    	  st.s[i].draw1();
   }
}
//
//stack functions end
void displaystacknqueue()
{
st.displaystack();
}
void displaystacknqueue1()
{
st.displaystack1();
}
void display1()
{
	glClear(GL_COLOR_BUFFER_BIT);
	glClearColor(0,0,0,0);
	setFont(GLUT_BITMAP_TIMES_ROMAN_24);
	glColor3f(1.0,1.0,1.0);
	drawstring(80,550," B.N.M. INSTITUTE OF TECHNOLOGY ");
	setFont(GLUT_BITMAP_HELVETICA_18);
	glColor3f(1.0,1.0,1.0);
	drawstring(220,530," Dept. of CSE ");
	setFont(GLUT_BITMAP_HELVETICA_18);
	glColor3f(1.0,1.0,1.0);
	drawstring(130,510," SUBJECT-Computer Graphics(15CSL68) ");
	glColor3f(1.0,1.0,1.0);
	drawstring(0,490," ----------------------------------------------------------------------------------------------- ");
	setFont(GLUT_BITMAP_HELVETICA_18);
	glColor3f(1.0,0.0,0.0);
	drawstring(150,470," TITLE:STACK IMPLEMENTATION ");
	glColor3f(1.0,1.0,0.0);
	drawstring(20,200," Submitted By :-");
	glColor3f(0.0,1.0,1.0);
	drawstring(20,180," NAME - AYUSHI RAI ");
	setFont(GLUT_BITMAP_HELVETICA_18);
	glColor3f(0.0,1.0,1.0);
	drawstring(20,160,"( USN - 1BG16CS025 )");
	glColor3f(0.0,1.0,1.0);
	drawstring(20,140,"( SEM - VI )");
	glColor3f(0.0,1.0,1.0);
	drawstring(20,120,"( SEC - A )");
	glColor3f(1.0,1.0,0.0);
	drawstring(350,200,"DATA STRUCTURE USED:");
	glColor3f(0.0,1.0,1.0);
	drawstring(400,180,"STACK");
	glColor3f(1.0,0.0,1.0);
	drawstring(135,20,"  Press Space key to go to next page ... ");
	glFlush();
}
void display()
{
	glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);
	glColor3f(1,0,0);
	glBegin(GL_LINE_LOOP);
	glVertex2f(100,200);
	glVertex2f(150,200);
	glVertex2f(150,450);
	glVertex2f(100,450);
	glEnd();
if(view==0)
{
	display1();
}
else if(view==1)
{
if(flagwired==0)
{
	btn1.draw();
	btn2.draw();
	displaystacknqueue();
}
if(flagwired==1)
{
	btn1.draw1();
	btn2.draw1();
	displaystacknqueue1();
}
glColor3f(1,0,1);
drawstring(200,560,"!!! Max Capacity of Stack is 5 !!!");
glColor3f(1,0,1);
drawstring(400,350,"Press 'push' to Push");
glColor3f(1,0,1);
drawstring(400,330,"Press 'pop' to Pop");
}
glFlush();
glutSwapBuffers();
glutPostRedisplay();
}
void mouse(int btn, int state, int x, int y)
{static int itemno=0;
	y=600-y;
	if(btn==GLUT_LEFT_BUTTON && state == GLUT_DOWN)
	{
	if(btn1.insidebutton(x,y))
	{
		btn1.togglestate();
		if(!st.stfull())
		st.push(itemno++);
	}
	if(btn2.insidebutton(x,y))
		{
			btn2.togglestate();
			if(!st.stempty())
					st.pop();

		}
	}
	if(btn==GLUT_LEFT_BUTTON && state == GLUT_UP)
	{
		if(btn1.insidebutton(x,y))
			{
				btn1.togglestate();
			}
		if(btn2.insidebutton(x,y))
					{
						btn2.togglestate();
					}
			}
	glutPostRedisplay();
}
void init()
{
	glClearColor(r,g,b,0);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluOrtho2D(0,600,0,600);
	glMatrixMode(GL_MODELVIEW);

}
void idle()
{
	glutPostRedisplay();
}
void select(int ch)
{
	static int itemno=0;
	float ambient[]={1,1,1,1};
	float light_pos[]={27,80,2,3};
	switch(ch)
	{
	case 1:if(!st.stfull())
		st.push(itemno++);
		break;
	case 2:if(!st.stempty())
					st.pop();
		break;
	case 3:r=0,g=1,b=0;
		glClearColor(r,g,b,1);
		break;
	case 4:r=1,g=1,b=0;
		glClearColor(r,g,b,1);
		break;
	case 5:glClearColor(0,0,0,0);
		glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);
		glEnable(GL_LIGHTING);
		glEnable(GL_LIGHT0);
		glMaterialfv(GL_FRONT,GL_AMBIENT,ambient);
		glLightfv(GL_LIGHT0,GL_POSITION,light_pos);
		glEnable(GL_DEPTH_TEST);
		break;
	case 6:glClearColor(r,g,b,0);
		glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);
		glDisable(GL_LIGHTING);
		glDisable(GL_LIGHT0);
		//glMaterialfv(GL_FRONT,GL_AMBIENT,ambient);
		//glLightfv(GL_LIGHT0,GL_POSITION,light_pos);
		glEnable(GL_DEPTH_TEST);
		break;
	case 7:flagwired=1;
		display();
		break;
	case 8:flagwired=0;
		display();
		break;
	case 9:exit(0);
		break;
	}
	glutPostRedisplay();
}
void NormalKey(GLubyte key, GLint x, GLint y)
{
	static int itemno=0;
    switch(key)
	{
	case ESCAPE : printf("Escape pressed... Exit...\n");
	              glutDestroyWindow(window);	
	              exit(0);
                  break;

    case ' '	: view=1;
                  display();
                  break;
	case BACKSPACE	: view=0; 
                  display1();
                  break;
	case 'a':if(!st.stfull())
		st.push(itemno++);
		break;
	case 'b':if(!st.stempty())
					st.pop();
		break;
	default:break;
    }

}
int main(int argc, char **argv)
{
	glutInit(&argc,argv);
	glutInitDisplayMode(GLUT_DOUBLE|GLUT_RGB|GLUT_DEPTH);
	glutInitWindowPosition(50,50);
	glutInitWindowSize(600,600);
	glutCreateWindow("STACK AND QUEUE");
	glutDisplayFunc(display);
	glutCreateMenu(select);
	//glutAddMenuEntry("Push  ",1);
	//glutAddMenuEntry("Pop   ",2);
	glutAddMenuEntry("Green ",3);
	glutAddMenuEntry("Yellow ",4);
	glutAddMenuEntry("Ambient Light",5);
	glutAddMenuEntry("Disable Ambient Light",6);
	glutAddMenuEntry("Wired  ",7);
	glutAddMenuEntry("Solid  ",8);
	glutAddMenuEntry("Exit  ",9);
	glutAttachMenu(GLUT_RIGHT_BUTTON);
	glutMouseFunc(mouse);
	glutIdleFunc(idle);
	glutKeyboardFunc(NormalKey);
	init();
	glEnable(GL_DEPTH_TEST);
	glutMainLoop();
	return 0;
}
